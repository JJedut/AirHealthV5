// <auto-generated />
using System;
using AirHealthV5.Server.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AirHealthV5.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AirHealthV5.Server.Domain.Models.ApiKeyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("KeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("AirHealthV5.Server.Domain.Models.DeviceModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SensorOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("AirHealthV5.Server.Domain.Models.DeviceReadingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("GasResistance")
                        .HasColumnType("real");

                    b.Property<float?>("Humidity")
                        .HasColumnType("real");

                    b.Property<float?>("MqTwo")
                        .HasColumnType("real");

                    b.Property<float?>("Pm1")
                        .HasColumnType("real");

                    b.Property<float?>("Pm10")
                        .HasColumnType("real");

                    b.Property<float?>("Pm25")
                        .HasColumnType("real");

                    b.Property<float?>("Pressure")
                        .HasColumnType("real");

                    b.Property<float?>("Temperature")
                        .HasColumnType("real");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DeviceReadings");
                });

            modelBuilder.Entity("AirHealthV5.Server.Domain.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AirHealthV5.Server.Domain.Models.DeviceModel", b =>
                {
                    b.HasOne("AirHealthV5.Server.Domain.Models.UserModel", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .HasPrincipalKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AirHealthV5.Server.Domain.Models.ThresholdsModel", "Thresholds", b1 =>
                        {
                            b1.Property<int>("DeviceModelId")
                                .HasColumnType("int");

                            b1.Property<int?>("GasResistanceMax")
                                .HasColumnType("int");

                            b1.Property<int?>("GasResistanceMaxCritical")
                                .HasColumnType("int");

                            b1.Property<int?>("GasResistanceMin")
                                .HasColumnType("int");

                            b1.Property<int?>("GasResistanceMinCritical")
                                .HasColumnType("int");

                            b1.Property<int?>("HumidityMax")
                                .HasColumnType("int");

                            b1.Property<int?>("HumidityMaxCritical")
                                .HasColumnType("int");

                            b1.Property<int?>("HumidityMin")
                                .HasColumnType("int");

                            b1.Property<int?>("HumidityMinCritical")
                                .HasColumnType("int");

                            b1.Property<int?>("MqTwoMax")
                                .HasColumnType("int");

                            b1.Property<int?>("MqTwoMaxCritical")
                                .HasColumnType("int");

                            b1.Property<int?>("MqTwoMin")
                                .HasColumnType("int");

                            b1.Property<int?>("MqTwoMinCritical")
                                .HasColumnType("int");

                            b1.Property<int?>("Pm10Max")
                                .HasColumnType("int");

                            b1.Property<int?>("Pm10MaxCritical")
                                .HasColumnType("int");

                            b1.Property<int?>("Pm10Min")
                                .HasColumnType("int");

                            b1.Property<int?>("Pm10MinCritical")
                                .HasColumnType("int");

                            b1.Property<int?>("Pm1Max")
                                .HasColumnType("int");

                            b1.Property<int?>("Pm1MaxCritical")
                                .HasColumnType("int");

                            b1.Property<int?>("Pm1Min")
                                .HasColumnType("int");

                            b1.Property<int?>("Pm1MinCritical")
                                .HasColumnType("int");

                            b1.Property<int?>("Pm25Max")
                                .HasColumnType("int");

                            b1.Property<int?>("Pm25MaxCritical")
                                .HasColumnType("int");

                            b1.Property<int?>("Pm25Min")
                                .HasColumnType("int");

                            b1.Property<int?>("Pm25MinCritical")
                                .HasColumnType("int");

                            b1.Property<int?>("PressureMax")
                                .HasColumnType("int");

                            b1.Property<int?>("PressureMaxCritical")
                                .HasColumnType("int");

                            b1.Property<int?>("PressureMin")
                                .HasColumnType("int");

                            b1.Property<int?>("PressureMinCritical")
                                .HasColumnType("int");

                            b1.Property<int?>("TemperatureMax")
                                .HasColumnType("int");

                            b1.Property<int?>("TemperatureMaxCritical")
                                .HasColumnType("int");

                            b1.Property<int?>("TemperatureMin")
                                .HasColumnType("int");

                            b1.Property<int?>("TemperatureMinCritical")
                                .HasColumnType("int");

                            b1.HasKey("DeviceModelId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceModelId");
                        });

                    b.Navigation("Thresholds");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AirHealthV5.Server.Domain.Models.UserModel", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
